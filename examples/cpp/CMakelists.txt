# # add third party, spdlog
# include(${CMAKE_SOURCE_DIR}/third_party/spdlog.cmake)

# Aggregate the sources
file(GLOB SRC_FILES
     "${CMAKE_CURRENT_SOURCE_DIR}/Src/data-structure/*.cc"
     "${CMAKE_CURRENT_SOURCE_DIR}/Src/data-structure/recursion/*.cc"
     "${CMAKE_CURRENT_SOURCE_DIR}/Src/cpp-functions/*.cc"
     "${CMAKE_CURRENT_SOURCE_DIR}/Src/cpp-functions/*.c"
     "${CMAKE_CURRENT_SOURCE_DIR}/Src/cpp-functions/thread/*.cc"
     "${CMAKE_CURRENT_SOURCE_DIR}/Src/cpp-functions/rvalue/*.cc"
     "${CMAKE_CURRENT_SOURCE_DIR}/Src/cpp-functions/function/*.cc"
     "${CMAKE_CURRENT_SOURCE_DIR}/Src/c-functions/*.c"
     "${CMAKE_CURRENT_SOURCE_DIR}/Src/c-functions/static_func/*.c"
     "${CMAKE_CURRENT_SOURCE_DIR}/Src/design-pattern/*.cc"
     "${CMAKE_CURRENT_SOURCE_DIR}/Src/design-pattern/*.c"
     "${CMAKE_CURRENT_SOURCE_DIR}/Src/utils/*.cc"
     "${CMAKE_CURRENT_SOURCE_DIR}/Src/third-party/*.cc"
     "${CMAKE_CURRENT_SOURCE_DIR}/Src/third-party/curl/*.cc"
     "${CMAKE_CURRENT_SOURCE_DIR}/Src/third-party/std/chronos/*.cc"
     "${CMAKE_CURRENT_SOURCE_DIR}/Src/third-party/std/filesystem/*.cc"
     "${CMAKE_CURRENT_SOURCE_DIR}/Src/boost/property_tree/*.cc"
     )
set(SOURCES "${SRC_FILES}")
set(EXECUTABLE_OUTPUT_PATH ${CMAKE_BINARY_DIR}/bin)

message("${CMAKE_CURRENT_SOURCE_DIR}")
# print sources
message("--SOURCES--")
message(${SOURCES})
message("-----------")

if (CMAKE_OSX_ARCHITECTURES MATCHES "arm64")
  set(ROOT_LIB "/opt/homebrew/Cellar/")
else()
  set(ROOT_LIB "/usr/local/opt/")
  set(x86_64_LIB ON)
endif()

message("ROOT_LIB ${ROOT_LIB}")

# installation: brew
find_package(boost)
if(NOT boost_FOUND)
  message("boost not found")
  if (x86_64_LIB)
    set(libboost
      # ${ROOT_LIB}/boost/lib/libboost_filesystem.a
      ${ROOT_LIB}/boost/lib/libboost_system-mt.a
      ${ROOT_LIB}/boost/lib/libboost_thread-mt.a
      ${ROOT_LIB}/boost/lib/libboost_chrono.a
      ${ROOT_LIB}/boost/lib/libboost_atomic-mt.a
      )
  else()
    set(libboost 
      # ${ROOT_LIB}/boost/1.82.0_1/lib/libboost_filesystem.a
      ${ROOT_LIB}/boost/1.82.0_1/lib/libboost_system-mt.a
      ${ROOT_LIB}/boost/1.82.0_1/lib/libboost_thread-mt.a
      ${ROOT_LIB}/boost/1.82.0_1/lib/libboost_chrono.a
      ${ROOT_LIB}/boost/1.82.0_1/lib/libboost_atomic-mt.a
    )
  endif()
endif()

find_package(curl)
if(NOT curl_FOUND)
  message("curl not found")
  if (x86_64_LIB)
    set(libcurl ${ROOT_LIB}/curl/lib/libcurl.a)
  else()
    set(libcurl ${ROOT_LIB}/curl/8.3.0/lib/libcurl.a)
  endif()
endif()

# set(libspdlog ${ROOT_LIB}/spdlog/1.12.0/lib/libspdlog.a)
# set(libspdlog ${ROOT_LIB}/spdlog/lib/libspdlog.a)
if (x86_64_LIB)
  set(libspdlog ${ROOT_LIB}/spdlog/lib/libspdlog.1.12.0.dylib)
else()
  set(libspdlog ${ROOT_LIB}/spdlog/1.12.0/lib/libspdlog.1.12.0.dylib)
endif()

find_package(openssl)
if(NOT openssl_FOUND)
  message("openssl not found")
  if (x86_64_LIB)
    set(libcrypto ${ROOT_LIB}/openssl@1.1/lib/libcrypto.a)
    set(libssl ${ROOT_LIB}/openssl@1.1/lib/libssl.a)
  else()
    set(libcrypto ${ROOT_LIB}/openssl@1.1/1.1.1v/lib/libcrypto.a)
    set(libssl ${ROOT_LIB}/openssl@1.1/1.1.1v/lib/libssl.a)
  endif()
endif()

if (x86_64_LIB)
  set (libfmt ${ROOT_LIB}/fmt/lib/libfmt.a)
else()
  set (libfmt ${ROOT_LIB}/fmt/10.1.1/lib/libfmt.a)
endif()

add_library(ccex ${SOURCES})

if (x86_64_LIB)
  target_include_directories(ccex
  PUBLIC
    ${CMAKE_CURRENT_SOURCE_DIR}/Inc
    ${ROOT_LIB}/boost/include
    ${ROOT_LIB}/nlohmann-json/include
    ${ROOT_LIB}/spdlog/include
    ${ROOT_LIB}/curl/include
    ${ROOT_LIB}/fmt/include # dependency of spdlog
  )
else()
  target_include_directories(ccex
  PUBLIC
    ${CMAKE_CURRENT_SOURCE_DIR}/Inc
    ${ROOT_LIB}/boost/1.82.0_1/include
    ${ROOT_LIB}/nlohmann-json/3.11.2/include
    ${ROOT_LIB}/spdlog/1.12.0/include
    ${ROOT_LIB}/curl/8.3.0/include
    ${ROOT_LIB}/fmt/10.1.1/include # dependency of spdlog
  )
endif()

target_link_libraries(ccex
PUBLIC
  ${libboost}
  ${libcurl}
  ${libspdlog}
  ${libcrypto}
  ${libssl}
  ${libfmt}
)

add_executable(${PROJECT_NAME} "${CMAKE_CURRENT_SOURCE_DIR}/Src/main.cc")

target_compile_options(${PROJECT_NAME} PRIVATE
  -Wall                # enable all warnings
  # -Wextra              # enable extra warnings
  # -pedantic            # enforce strict ANSI/ISO compliance
  # -O2                  # enable optimization
  # -g                   # enable debugging symbols
  # -c                   # generate object files only
  # -S                   # generate assembly language output
  # -save-temps
  # -masm=intel          # use Intel syntax for assembly output
)

target_include_directories(${PROJECT_NAME}
PUBLIC
  ${CMAKE_CURRENT_SOURCE_DIR}/Inc
)

target_link_libraries(${PROJECT_NAME} PUBLIC ccex)


# install(TARGETS ${PROJECT_NAME} DESTINATION /usr/local/lib)
# install(DIRECTORY ${CMAKE_SOURCE_DIR}/include/sense DESTINATION /usr/local/include)
# install(DIRECTORY ${PROJECT_SOURCE_DIR}/third_party/spdlog/include/spdlog DESTINATION /usr/local/include)
# install(DIRECTORY ${PROJECT_SOURCE_DIR}/third_party/tensorflow/tensorflow DESTINATION /usr/local/include)
# install(TARGETS sense-core DESTINATION /usr/local/lib)
# install(DIRECTORY ${PROJECT_SOURCE_DIR}/third_party/spdlog/include/spdlog DESTINATION /usr/local/include)